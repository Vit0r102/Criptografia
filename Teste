<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Texto Interativo React Simples</title>
  <style>
    body {
      background-color: #111;
      color: white;
      font-family: Arial, sans-serif;
      padding: 40px;
      text-align: center;
    }
    .text-final {
      color: white;
      font-weight: bold;
      font-size: 24px;
    }
    .text-embaralhado {
      color: #facc15;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Teste do Texto Interativo</h1>
  <div id="root"></div>

  <!-- React e ReactDOM -->
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>

  <!-- Babel para JSX -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <script type="text/babel">
    const { useState, useEffect, useRef } = React;

    function DecryptedText({
      text,
      speed = 50,
      maxIterations = 10,
      sequential = false,
      revealDirection = "start",
      useOriginalCharsOnly = false,
      characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%",
      className = "",
      encryptedClassName = "",
      animateOn = "hover",
    }) {
      const [displayText, setDisplayText] = useState(text);
      const [isHovering, setIsHovering] = useState(false);
      const [isScrambling, setIsScrambling] = useState(false);
      const [revealedIndices, setRevealedIndices] = useState(new Set());
      const intervalRef = useRef(null);

      useEffect(() => {
        let currentIteration = 0;

        const getNextIndex = (revealedSet) => {
          const textLength = text.length;
          switch (revealDirection) {
            case "start":
              return revealedSet.size;
            case "end":
              return textLength - 1 - revealedSet.size;
            case "center": {
              const middle = Math.floor(textLength / 2);
              const offset = Math.floor(revealedSet.size / 2);
              const nextIndex =
                revealedSet.size % 2 === 0
                  ? middle + offset
                  : middle - offset - 1;
              if (
                nextIndex >= 0 &&
                nextIndex < textLength &&
                !revealedSet.has(nextIndex)
              ) {
                return nextIndex;
              }
              for (let i = 0; i < textLength; i++) {
                if (!revealedSet.has(i)) return i;
              }
              return 0;
            }
            default:
              return revealedSet.size;
          }
        };

        const availableChars = useOriginalCharsOnly
          ? Array.from(new Set(text.split(""))).filter((char) => char !== " ")
          : characters.split("");

        const shuffleText = (originalText, currentRevealed) => {
          return originalText
            .split("")
            .map((char, i) => {
              if (char === " ") return " ";
              if (currentRevealed.has(i)) return originalText[i];
              return availableChars[
                Math.floor(Math.random() * availableChars.length)
              ];
            })
            .join("");
        };

        if (isHovering) {
          setIsScrambling(true);
          intervalRef.current = setInterval(() => {
            setRevealedIndices((prevRevealed) => {
              if (sequential) {
                if (prevRevealed.size < text.length) {
                  const nextIndex = getNextIndex(prevRevealed);
                  const newRevealed = new Set(prevRevealed);
                  newRevealed.add(nextIndex);
                  setDisplayText(shuffleText(text, newRevealed));
                  return newRevealed;
                } else {
                  clearInterval(intervalRef.current);
                  setIsScrambling(false);
                  return prevRevealed;
                }
              } else {
                setDisplayText(shuffleText(text, prevRevealed));
                currentIteration++;
                if (currentIteration >= maxIterations) {
                  clearInterval(intervalRef.current);
                  setIsScrambling(false);
                  setDisplayText(text);
                }
                return prevRevealed;
              }
            });
          }, speed);
        } else {
          setDisplayText(text);
          setRevealedIndices(new Set());
          setIsScrambling(false);
          clearInterval(intervalRef.current);
        }

        return () => {
          clearInterval(intervalRef.current);
        };
      }, [
        isHovering,
        text,
        speed,
        maxIterations,
        sequential,
        revealDirection,
        characters,
        useOriginalCharsOnly,
      ]);

      const hoverProps =
        animateOn === "hover"
          ? {
              onMouseEnter: () => setIsHovering(true),
              onMouseLeave: () => setIsHovering(false),
            }
          : {};

      return (
        <span
          style={{ display: "inline-block", whiteSpace: "pre-wrap" }}
          {...hoverProps}
          aria-label={text}
        >
          {displayText.split("").map((char, index) => {
            const isRevealedOrDone =
              revealedIndices.has(index) || !isScrambling || !isHovering;
            return (
              <span
                key={index}
                className={isRevealedOrDone ? className : encryptedClassName}
              >
                {char}
              </span>
            );
          })}
        </span>
      );
    }

    function App() {
      return (
        <div>
          <DecryptedText
            text="O Marcão é um viadão."
            speed={60}
            sequential={true}
            revealDirection="center"
            className="text-final"
            encryptedClassName="text-embaralhado"
            animateOn="hover"
          />
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(<App />);
  </script>
</body>
</html>

